import Head from "next/head";
import Link from "next/link";
import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

// import dayjs from "dayjs";
// import relativeTime from "dayjs/plugin/relativeTime"
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";
import { toast } from "react-hot-toast"

const CreatePostWizard = () => {
  const { user } = useUser()

  const [input, setInput] = useState("")

  const ctx = api.useContext()

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("")
      void ctx.posts.getAll.invalidate()
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0])
      }
      else {
        toast.error("Failed to post.  Message either too long or too short")
      }
    }
  })

  if (!user) return null

  return <div className="flex gap-4 w-full">
    <img 
      src={user.profileImageUrl} 
      alt="Profile image" 
      className = "w-10 h-10 rounded-full"
    />
    <input 
      placeholder="Type something!" 
      className="bg-transparent grow outline-none" 
      type="text"
      value={input}
      onChange={(e) => setInput(e.target.value)}
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          e.preventDefault()
          if (input !== "") {
            mutate({ content: input })
          }
        }
      }}
      disabled={isPosting}
    />
    {input !== "" && !isPosting &&(
      <button onClick={() => mutate({ content: input })}>
        Post
      </button>
    )}

    {isPosting && <div className="flex items-center justify-center"><LoadingSpinner size={20}/></div>}
  </div>
}



type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div key={post.id} className="flex border-b border-slate-400 p-4 gap-3">
      <img
        src = {author.profileImageUrl} 
        alt="Profile image" 
        className = "w-10 h-10 rounded-full"
      />
      <div className="flex flex-col">
        <div className="flex text-slate-300 flex gap-1">
          <span>{`@${author.username}`}</span>
          <span className="font-thin">{` Â· 1 hour ago`}</span>
          {/* Supposed to have relative time thing, but i couldn't make it work ts: ~1h1m*/}
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  )
}

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery()

  if (postsLoading) return <LoadingPage />
  if (!data) return <div>Something went wrong</div>

  return (
    <div className="flex flex-col"> 
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  )
}

export default function Home() {
  const {isLoaded: userLoaded, isSignedIn } = useUser()
  
  api.posts.getAll.useQuery()
  if (!userLoaded) return <div /> //return empty div if user isn't loaded yet

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="w-full h-full md:max-w-2xl border-x border-slate-400">
          <div className="border-b border-slate-400 p-4 flex">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton /> 
              </div>
            )}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
}
